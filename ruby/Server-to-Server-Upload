#!/usr/bin/ruby

require 'rubygems'
require 'google/api_client'
require 'google/api_client/client_secrets'
require 'google/api_client/auth/file_storage'
require 'google/api_client/auth/installed_app'
require 'certified'

# A limited OAuth 2 access scope that allows for uploading files, but not other
# types of account access.
YOUTUBE_UPLOAD_SCOPE = 'https://www.googleapis.com/auth/youtube.upload'
YOUTUBE_API_SERVICE_NAME = 'youtube'
YOUTUBE_API_VERSION = 'v3'

def get_authenticated_service
  puts @PROGRAM_NAME
  api_client = Google::APIClient.new(
    :application_name => $PROGRAM_NAME,
    :application_version => '1.0.0'
  )

  puts 'get key'
  key = Google::APIClient::KeyUtils.load_from_pkcs12('oauth2service.p12', 'notasecret')
  auth_client = Signet::OAuth2::Client.new(
    :token_credential_uri => 'https://accounts.google.com/o/oauth2/token',
    :audience => 'https://accounts.google.com/o/oauth2/token',
    :scope => YOUTUBE_UPLOAD_SCOPE,
    :issuer => 'MY_CLIENT_EMAIL',
    :person => 'email@email.com', #an email account associated with the youtube account to upload to
    :signing_key => key)
  auth_client.fetch_access_token!
  api_client.authorization = auth_client
  puts 'got client'
  youtube = api_client.discovered_api(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION)
  puts 'got youtube'
  return api_client, youtube
end

def upload2youtube file, title, description, category_id, keywords, privacy_status
  client, youtube = get_authenticated_service
  puts 'begin'
  begin
    body = {
      :snippet => {
        :title => title,
        :description => description,
        :tags => keywords.split(','),
        :categoryId => category_id,
      },
      :status => {
        :privacyStatus => privacy_status
      }
    }
    puts body.keys.join(',')

    # Call the API's videos.insert method to create and upload the video.
    videos_insert_response = client.execute!(
      :api_method => youtube.videos.insert,
      :body_object => body,
      :media => Google::APIClient::UploadIO.new(file, 'video/*'),
      :parameters => {
        'uploadType' => 'multipart',
        :part => body.keys.join(',')
      }
    )

    puts'inserted'
    # videos_insert_response.resumable_upload.send_all(client)

    puts "'#{videos_insert_response.data.snippet.title}' (video id: #     {videos_insert_response.data.id}) was successfully uploaded."
   rescue Google::APIClient::TransmissionError => e
    puts e.result.body
  end
end
